apply plugin: 'java'
apply plugin: 'idea'

buildscript {

    ext{
        springBootVersion = '2.1.2.RELEASE'
        springVersion = '5.1.4.RELEASE'
        junitPlatformVersion =  '1.3.2'
        junitJupiterVersion = '5.3.2'
    }

    repositories {
        mavenCentral()
    }

    dependencies{
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
    }
}

group 'com.prolog'
version '1.0-SNAPSHOT'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'




sourceCompatibility = 1.8

repositories {
    mavenCentral()

}

dependencies {

    def defaultBoot = ['spring-boot-starter'
    ]

    defaultBoot.each { bootModule ->
        compile("org.springframework.boot:$bootModule:$springBootVersion")
    }

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    testCompile group: 'junit', name: 'junit', version: '4.12'

    def junitPlatformModules = [
            "junit-platform-commons",
            "junit-platform-engine",
            "junit-platform-runner",
    ]

    junitPlatformModules.each { name ->
        testCompile("org.junit.platform:$name:$junitPlatformVersion")
    }


    def junitVintageModules = [
            "junit-jupiter-api",
            "junit-jupiter-engine",
            "junit-jupiter-params",
    ]
    junitVintageModules.each { name ->
        testCompile "org.junit.jupiter:$name:$junitJupiterVersion"
    }
    testCompile "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"
    testCompile("org.junit.platform:junit-platform-runner:$junitPlatformVersion") {
        exclude module: "junit"
    }
    testCompile "org.mockito:mockito-core:2.23.4"

}
